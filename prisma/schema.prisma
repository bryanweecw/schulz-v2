datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "sessions")
}

model User {
    id                     String     @id @default(cuid())
    name                   String?
    email                  String?    @unique
    emailVerified          DateTime?
    image                  String?
    createdAt              DateTime   @default(now()) @map(name: "created_at")
    updatedAt              DateTime   @default(now()) @map(name: "updated_at")
    accounts               Account[]
    sessions               Session[]
    meetings               Meeting[]
    stripeCustomerId       String?    @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?    @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?    @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime?  @map(name: "stripe_current_period_end")
    File                   File[]
    Note                   Note[]
    Email                  Email[]
    Customer               Customer[]
    Company                Company[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Company {
    id           Int    @id @default(autoincrement())
    company_name String @db.VarChar(1000)
    user         User   @relation(fields: [user_id], references: [id])
    user_id      String

    @@index([user_id])
}

model Customer {
    customer_id Int     @id @default(autoincrement())
    user        User    @relation(fields: [user_id], references: [id])
    user_id     String
    company_id  Int
    biodata     String  @db.VarChar(1000)
    title       String  @db.VarChar(1000)
    Deal        Deal[]
    Email       Email[]

    @@index([user_id])
}

model Deal {
    deal_id          Int      @id @default(autoincrement())
    deal_size        Int      @db.UnsignedMediumInt
    deal_description String   @db.VarChar(10000) /// We can attach a description of up to 10,000 characters. This includes table formatting, markdown etc.
    customer         Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id      Int

    @@index([customer_id])
}

model Email {
    email_id      Int      @id @default(autoincrement())
    email_content String   @db.VarChar(10000) /// Raw email text string
    email_subject String   @db.VarChar(1000)
    user          User     @relation(fields: [user_id], references: [id])
    user_id       String
    customer      Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id   Int

    @@index([user_id])
    @@index([customer_id])
}

model Note {
    note_id   Int    @id @default(autoincrement())
    note_text String @db.VarChar(10000) // Default limit of 10,000 chars for all notes
    user      User   @relation(fields: [userId], references: [id])
    userId    String

    @@index([userId])
}

model Meeting {
    meeting_id    Int      @id @default(autoincrement())
    user          User     @relation(fields: [userId], references: [id])
    summary       String   @db.VarChar(1000)
    meeting_date  DateTime @db.Timestamp()
    meeting_notes String   @db.VarChar(1000)
    userId        String
    File          File[]

    @@index([userId])
}

model Collateral {
    collateral_id Int    @id @default(autoincrement())
    url           String @db.VarChar(1000)
    summary       String @db.VarChar(1000)
}

model Waitlist {
    // At most 1000 chars
    email    String   @id @unique @db.VarChar(200)
    goal     String   @default("Sales")
    name     String   @db.VarChar(1000)
    createAt DateTime @default(now())
}

model File {
    id                Int      @id @default(autoincrement())
    key               String   @unique
    url               String   @db.VarChar(1000)
    createdAt         DateTime @default(now())
    userId            String?
    user              User?    @relation(fields: [userId], references: [id])
    // Mutex Lock
    isProcessing      Boolean  @default(false)
    startedprocessing DateTime @default(now())
    isTranscribed     Boolean  @default(false)
    transcript        String?  @db.VarChar(10000)
    meeting           Meeting? @relation(fields: [meeting_id], references: [meeting_id])
    meeting_id        Int?

    @@index([userId])
    @@index([meeting_id])
}
