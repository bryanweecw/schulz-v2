generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Meeting       Meeting[]
    File          File[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Meeting {
    id            String          @id @default(cuid())
    title         String
    description   String
    date          DateTime
    user          User            @relation(fields: [userId], references: [id])
    userId        String
    note          String          @db.Text()
    FileToMeeting FileToMeeting[]
}

model FileToMeeting {
    id        Int    @id @default(autoincrement())
    meetingId String
    fileId    Int

    Meeting Meeting @relation(fields: [meetingId], references: [id])
    File    File    @relation(fields: [fileId], references: [id])
}

model File {
    id                Int             @id @default(autoincrement())
    key               String          @unique
    url               String          @db.VarChar(1000)
    createdAt         DateTime        @default(now())
    // Mutex Lock
    isProcessing      Boolean         @default(false)
    startedprocessing DateTime        @default(now())
    isTranscribed     Boolean         @default(false)
    transcript        String?         @db.VarChar(10000)
    user              User            @relation(fields: [userId], references: [id])
    userId            String
    FileToMeeting     FileToMeeting[]
    deleted           Boolean         @default(false)

    @@index([userId])
}
